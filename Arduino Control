// ENGE 270 Micro-grid control
// Jackson Pope and Will Coston
// Editied by Jackson Pope 11/21/2020

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Party Mode Music Declarations
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// All music used in our party mode was made by Robson Couto

/* 
  Cantina band song from Star Wars
  More songs available at https://github.com/robsoncouto/arduino-songs                                            
                                              
                                              Robson Couto, 2019
*/

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST      0


// change this to make the song slower or faster
int tempo = 140;

// change this to whichever pin you want to use
int buzzer = 38;

// notes of the moledy followed by the duration.
// a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
// !!negative numbers are used to represent dotted notes,
// so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
int melody[] = {
  
  // Cantina BAnd - Star wars 
  // Score available at https://musescore.com/user/6795541/scores/1606876
  NOTE_B4,-4, NOTE_E5,-4, NOTE_B4,-4, NOTE_E5,-4, 
  NOTE_B4,8,  NOTE_E5,-4, NOTE_B4,8, REST,8,  NOTE_AS4,8, NOTE_B4,8, 
  NOTE_B4,8,  NOTE_AS4,8, NOTE_B4,8, NOTE_A4,8, REST,8, NOTE_GS4,8, NOTE_A4,8, NOTE_G4,8,
  NOTE_G4,4,  NOTE_E4,-2, 
  NOTE_B4,-4, NOTE_E5,-4, NOTE_B4,-4, NOTE_E5,-4, 
  NOTE_B4,8,  NOTE_E5,-4, NOTE_B4,8, REST,8,  NOTE_AS4,8, NOTE_B4,8,

  NOTE_A4,-4, NOTE_A4,-4, NOTE_GS4,8, NOTE_A4,-4,
  NOTE_D5,8,  NOTE_C5,-4, NOTE_B4,-4, NOTE_A4,-4,
  NOTE_B4,-4, NOTE_E5,-4, NOTE_B4,-4, NOTE_E5,-4, 
  NOTE_B4,8,  NOTE_E5,-4, NOTE_B4,8, REST,8,  NOTE_AS4,8, NOTE_B4,8,
  NOTE_D5,4, NOTE_D5,-4, NOTE_B4,8, NOTE_A4,-4,
  NOTE_G4,-4, NOTE_E4,-2,
  NOTE_E4, 2, NOTE_G4,2,
  NOTE_B4, 2, NOTE_D5,2,

  NOTE_F5, -4, NOTE_E5,-4, NOTE_AS4,8, NOTE_AS4,8, NOTE_B4,4, NOTE_G4,4, 
  
  
  

};

// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
// there are two values per note (pitch and duration), so for each note there are four bytes
int notes = sizeof(melody) / sizeof(melody[0]) / 2;

// this calculates the duration of a whole note in ms
int wholenote = (60000 * 2) / tempo;

int divider = 0, noteDuration = 0;

int party1 = 40;
int party2 = 42;
int party3 = 44;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//               Motor Variables
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Use the servo control library to set the speed of the motors
#include <Servo.h>
Servo servoMotor;

const int motorPin = 9;   // This will be the physical pin for the motor
int topSpeed = 75;         // Enter the top speed of the motor here (from 0% to 100%)
bool speedIsSet = false;   // Boolean that tells if speed has been set

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//             Grid Control Variables
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 int relay [13] = {41,37,35,33,31,29,27,25,23,36,34,32,30};       // 12 relay outputs, 1st input set to nothing

const int stateButton = 8;              // Button Inputs
const int capFixButton = 7;
const int partyButton = 6;

bool stateButtonR;                      // Readings of buttons
bool capFixButtonR;
bool partyButtonR;

int timeState;
const int start = 0;                    // Different states of the day
const int morning = 1;
const int noon = 2;
const int night = 3;

bool capState;                          // Capacitor bank engagment
const bool capOff = 0;
const bool capOn = 1;

bool partyState;                        // Just for fun, Party mode
const bool noParty = 0;
const bool party = 1;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//                 LCD Variables
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include <LiquidCrystal.h>

LiquidCrystal lcd(12,11,5,4,3,2);

//==============================================================
//
//                      Setup
//
//==============================================================

void setup() {  
  lcd.begin(16,2);
  lcd.print("setup...");

  pinMode(party1, OUTPUT);
  pinMode(party2, OUTPUT);
  pinMode(party3, OUTPUT);


  Serial.begin(9600);

  servoMotor.attach(motorPin);                 // Setup for motor control and arm the controller
  arm();

  pinMode (stateButton, INPUT_PULLUP);         // declare intputs
  pinMode (capFixButton, INPUT_PULLUP);
  pinMode (partyButton, INPUT_PULLUP);

  pinMode (motorPin, OUTPUT);                  // declare outputs

  for(int i=0; i<13; i=i+1) {
    pinMode (relay [i], OUTPUT);               // declare relay outputs
    digitalWrite(relay[i], LOW);               // Set all relays low 
    Serial.println(relay[i]);
  }

  timeState = start;                           // Initialize states
  capState = capOff;
  partyState = noParty;
}

//==============================================================
//
//                           LOOP   
//
//==============================================================

void loop() {
  //---------------------
  //      motor
  //---------------------
    Serial.println(".");
    Serial.print(stateButtonR);
    int speed;
    if(speedIsSet == false){                         // Start at 10 percent and gradually increase to the entered top speed.
       
       for(speed = 10; speed <= topSpeed ; speed += 5) {
         setSpeed(speed);
         delay(1000);
         speedIsSet = true;
       }
       if (speedIsSet == true) {
         lcd.clear();
         lcd.setCursor(0,0);
         lcd.print("State: start");
       }
    }

    partyButtonR = !digitalRead(partyButton);

    if (partyState == noParty) {                       // The rest of the grid will not be updated during party mode
        stateButtonR = !digitalRead(stateButton);
        capFixButtonR = !digitalRead(capFixButton);
        
      
      //------------------------
      // day time state machine                        //changed by stateButton
      //------------------------
        switch (timeState) {                     
          case start: {                                // everything is off until state button is pressed
            Serial.print("start");
            if (stateButtonR == LOW) {
              timeState = morning;
              delay(1000);
              lcd.clear();                             // print state and cap states on LCD
              lcd.setCursor(0,0);
              lcd.print("State: Morning");
              lcd.setCursor(0,1);
              if (capState){
                lcd.print("Cap Bank: On");
              }
              else{
                lcd.print("Cap Bank: Off");
              }
            }
            break;
          }
      
          case morning: {
            Serial.print("morning");                   // turn houses and clinic on
            setRelay (1,4,HIGH);
            setRelay (7,8,HIGH);
            setRelay (11,11,HIGH);                     // house 3 on phase 2
    
            setRelay (5,6,LOW);                        // turn cyber cafe, school, and store off
            setRelay (10,10,LOW);
            setRelay (12,12,LOW);                      // move house 4 to phase 1
      
            if (stateButtonR == LOW) {                 // move to next state
              timeState = noon;
              delay(1000);
              lcd.clear();                             // print state and cap states on LCD
              lcd.setCursor(0,0);
              lcd.print("State: Noon");
              lcd.setCursor(0,1);
              if (capState){
                lcd.print("Cap Bank: On");
              }
              else{
                lcd.print("Cap Bank: Off");
              }
            }
              break;
          }
      
          case noon: {                 
            Serial.print("noon");
            setRelay (1,1,HIGH);                       // turn on house 1 and 3, cyber cafe, school, clinic, and store
            setRelay (3,3,HIGH);
            setRelay (5,8,HIGH);
            setRelay (10,10,HIGH);
            setRelay (12,12,HIGH);                     // house 4 on phase 1
      
            setRelay (2,2,LOW);                        // turn off house 1 and 3
            setRelay (4,4,LOW);
            setRelay (11,11,LOW);                      // house 3 is off N/A
      
            if (stateButtonR == LOW) {                 // move to next state
              timeState = night;
              delay(1000);
              lcd.clear();                             // print state and cap states on LCD
              lcd.setCursor(0,0);
              lcd.print("State: Night");
              lcd.setCursor(0,1);
              if (capState){
                lcd.print("Cap Bank: On");
              }
              else{
                lcd.print("Cap Bank: Off");
              }
            }
            break;
          }
      
          case night: {
            Serial.print("night");
            setRelay (1,5,HIGH);                       // turn on houses 1-4, cyber cafe, clinic, and store on  
            setRelay (7,8,HIGH);
            setRelay (10,10,HIGH);
            setRelay (11,11,HIGH);                     // move house 3 to phase 1
    
            setRelay (6,6,LOW);                        // turn off school
            setRelay (12,12,LOW);                      // move house 4 to phase 2
      
            if (stateButtonR == LOW) {                 // move to next state
              timeState = morning;
              delay(1000);
              lcd.clear();                             // print state and cap states on LCD
              lcd.setCursor(0,0);
              lcd.print("State: Morning");
              lcd.setCursor(0,1);
              if (capState){
                lcd.print("Cap Bank: On");
              }
              else{
                lcd.print("Cap Bank: Off");
              }
            }
            break;
          }
        }
    
      //----------------------
      //   Cap Bank State Machine                      //state changed by capFixButton
      //----------------------
        switch (capState) {                            
          case capOff: {
            Serial.print("   cap off");
            setRelay(9,9,LOW);                         // turn cap off
      
            if (capFixButtonR == LOW) {
              capState = capOn;    
              delay(1000);
              if (timeState == morning) {              // print states of grid
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("State: Morning");
                lcd.setCursor(0,1);
                lcd.print("Cap Bank: On");
              }
              if (timeState == noon) {
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("State: Noon");
                lcd.setCursor(0,1);
                lcd.print("Cap Bank: On");
              }
              if (timeState == night) {
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("State: Night");
                lcd.setCursor(0,1);
                lcd.print("Cap Bank: On");
              }
            }
            break;
          }
      
          case capOn: {
            Serial.print("   cap on"); 
            setRelay(9,9,HIGH);                        // turn cap on
      
            if (capFixButtonR == LOW) {
              capState = capOff;
              delay(1000);
              if (timeState == morning) {              // print states of grid
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("State: Morning");
                lcd.setCursor(0,1);
                lcd.print("Cap Bank: Off");
              }
              if (timeState == noon) {
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("State: Noon");
                lcd.setCursor(0,1);
                lcd.print("Cap Bank: Off");
              }
              if (timeState == night) {
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("State: Night");
                lcd.setCursor(0,1);
                lcd.print("Cap Bank: Off");
              }
            }
            break;
          }
       }
    }

  //----------------------
  //   Party State Machine                            changed by partyButton
  //----------------------
    switch (partyState) {
      case noParty: {
        Serial.print("no Party");
        if (partyButtonR == LOW) {
          partyState = party;
          delay(1000);
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("Party Time!");
        }
        break;
      }
  
      case party: {
        Serial.print("party");
        // iterate over the notes of the melody. 
        for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
      
          // calculates the duration of each note
          divider = melody[thisNote + 1];
          if (divider > 0) {
            // regular note, just proceed
            noteDuration = (wholenote) / divider;
          } else if (divider < 0) {
            // dotted notes are represented with negative durations!!
            noteDuration = (wholenote) / abs(divider);
            noteDuration *= 1; // increases the duration in half for dotted notes
          }
      
          // we only play the note for 90% of the duration, leaving 10% as a pause
          tone(buzzer, melody[thisNote], noteDuration*0.9);
      
          // Wait for the specief duration before playing the next note.
          delay(noteDuration);
          
          // stop the waveform generation before the next note.
          noTone(buzzer);
          Serial.print(".");
          changeLed(party1);
          changeLed(party2);
          changeLed(party3);
        }
        digitalWrite(party1, LOW);
        digitalWrite(party2, LOW);
        digitalWrite(party3, LOW);
        partyState = noParty;
        if (capState == capOn) {
          if (timeState == morning) {
             lcd.clear();
             lcd.setCursor(0,0);
             lcd.print("State: Morning");
             lcd.setCursor(0,1);
             lcd.print("Cap Bank: On");
           }
           if (timeState == noon) {
             lcd.clear();
             lcd.setCursor(0,0);
             lcd.print("State: Noon");
             lcd.setCursor(0,1);
             lcd.print("Cap Bank: On");
           }
           if (timeState == night) {
             lcd.clear();
             lcd.setCursor(0,0);
             lcd.print("State: Night");
             lcd.setCursor(0,1);
             lcd.print("Cap Bank: On");
           }
        }
        else {
          if (timeState == morning) {
             lcd.clear();
             lcd.setCursor(0,0);
             lcd.print("State: Morning");
             lcd.setCursor(0,1);
             lcd.print("Cap Bank: Off");
           }
           if (timeState == noon) {
             lcd.clear();
             lcd.setCursor(0,0);
             lcd.print("State: Noon");
             lcd.setCursor(0,1);
             lcd.print("Cap Bank: Off");
           }
           if (timeState == night) {
             lcd.clear();
             lcd.setCursor(0,0);
             lcd.print("State: Night");
             lcd.setCursor(0,1);
             lcd.print("Cap Bank: Off");
           }
        }
       
      }
    }
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//                  Custom Functions
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void arm() {                                       // Arm motor
   setSpeed(0);
   delay(1000);
}

void setSpeed(int speed){
   int pulseWidth = map(speed, 0, 100, 1000, 2000);
   servoMotor.writeMicroseconds(pulseWidth);
}

void setRelay (int l, int h, bool s) {             // Used to declare outputs of relays using an array-like notation
  for(int i=l; i<=h; i=i+1) {
    digitalWrite(relay[i], s);
  }
}  

void changeLed (int led) {                         // Used for party mode
  digitalWrite(led, random(2));
}
